services:
  mongo:
    image: mongo:6.0
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: ["--bind_ip_all"]
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh -u root -p example --authenticationDatabase admin --eval 'db.adminCommand(\"ping\")' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stylemate-network   # ðŸ§© ajoutÃ© pour cohÃ©rence rÃ©seau

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stylemate-network   # ðŸ§© ajoutÃ©

  ai:
    build:
      context: "C:/Users/gbazi/OneDrive/Documents/StyleMate_Project/stylemate-ai"
      dockerfile: Dockerfile
    container_name: stylemate-ai
    restart: always
    ports:
      - "8001:8001"
    volumes:
      - C:/Users/gbazi/OneDrive/Documents/StyleMate_Project/stylemate-ai/models_enhanced_outfits:/app/models_enhanced_outfits
    depends_on:
      mongo:
        condition: service_healthy   # ðŸ§  utile si ton IA lit la base de training Mongo
    networks:
      - stylemate-network

  backend:
    build: .
    restart: always
    ports:
      - "5000:5000"
    env_file:
      - .env
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai:
        condition: service_started   # âœ… attend que le service IA soit prÃªt
    networks:
      - stylemate-network

volumes:
  mongo-data:

networks:
  stylemate-network:
    driver: bridge
